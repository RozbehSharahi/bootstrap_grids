# Remove 2nd column from defaultGridSeetup, colpos 101, 102 are used
lib.gridelements.defaultGridSetup.columns.2 >

# Grid definitions
#
lib.bootstrap_grids {

    # Column grids
    2cols < lib.gridelements.defaultGridSetup
    2cols {
        wrap = <div class="row {field:flexform_rowValign} {field:flexform_rowHalign} {field:flexform_rowCustom}">|</div>
        wrap.insertData = 1
        columns {
            101 < .default
            101.dataWrap = <div class="{field:flexform_xsCol1} {field:flexform_smCol1} {field:flexform_mdCol1} {field:flexform_lgCol1} {field:flexform_xlCol1} {field:flexform_col21class}">|</div>
            # override if none set (supporting drag&drop)
            101.dataWrap.override = <div class="col">|</div>
            101.dataWrap.override.if.isNull.field = flexform_xsCol1
            101.wrap >
            102 < .101
            102.dataWrap = <div class="{field:flexform_xsCol2} {field:flexform_smCol2} {field:flexform_mdCol2} {field:flexform_lgCol2} {field:flexform_xlCol2} {field:flexform_col22class}">|</div>
            102.dataWrap.override.if.isNull.field = flexform_xsCol2
        }
    }
    3cols < .2cols
    3cols {
        columns {
            101.dataWrap = <div class="{field:flexform_xsCol1} {field:flexform_smCol1} {field:flexform_mdCol1} {field:flexform_lgCol1} {field:flexform_xlCol1} {field:flexform_col31class}">|</div>
            102.dataWrap = <div class="{field:flexform_xsCol2} {field:flexform_smCol2} {field:flexform_mdCol2} {field:flexform_lgCol2} {field:flexform_xlCol2} {field:flexform_col32class}">|</div>
            103 < .101
            103.dataWrap = <div class="{field:flexform_xsCol3} {field:flexform_smCol3} {field:flexform_mdCol3} {field:flexform_lgCol3} {field:flexform_xlCol3} {field:flexform_col33class}">|</div>
            102.dataWrap.override.if.isNull.field = flexform_xsCol3
        }
    }
    4cols < .3cols
    4cols {
        columns {
            101.dataWrap = <div class="{field:flexform_xsCol1} {field:flexform_smCol1} {field:flexform_mdCol1} {field:flexform_lgCol1} {field:flexform_xlCol1} {field:flexform_col41class}">|</div>
            102.dataWrap = <div class="{field:flexform_xsCol2} {field:flexform_smCol2} {field:flexform_mdCol2} {field:flexform_lgCol2} {field:flexform_xlCol2} {field:flexform_col42class}">|</div>
            103.dataWrap = <div class="{field:flexform_xsCol3} {field:flexform_smCol3} {field:flexform_mdCol3} {field:flexform_lgCol3} {field:flexform_xlCol3} {field:flexform_col43class}">|</div>
            104 < .101
            104.dataWrap = <div class="{field:flexform_xsCol4} {field:flexform_smCol4} {field:flexform_mdCol4} {field:flexform_lgCol4} {field:flexform_xlCol4} {field:flexform_col44class}">|</div>
            104.dataWrap.override.if.isNull.field = flexform_xsCol4
        }
    }

    # Tabs
    simpleTabs < lib.gridelements.defaultGridSetup
    simpleTabs {
        outerWrap = <div class="simple-tabs {field:flexform_style}">|</div>
        outerWrap.insertData = 1

        prepend = CONTENT
        prepend {
            table = tt_content
            select {
              selectFields = header, uid, tx_gridelements_container, sorting
              where = tx_gridelements_container={field:uid}
              where.insertData = 1
              orderBy = sorting
            }
            wrap = <div class="nav nav-tabs" role="tablist">|</div>
            renderObj = COA
            renderObj {
              5 = LOAD_REGISTER
              5 {
                TabCount.cObject = TEXT
                TabCount.cObject.data = register:TabCount
                TabCount.cObject.wrap = |+1
                TabCount.prioriCalc = intval
              }
              10 = TEXT
              10 {
                field = header
                insertData = 1
                wrap = |
                outerWrap.cObject = CASE
                outerWrap.cObject {
                  key.data = register:TabCount
                  default = TEXT
                  default.value = <a class="nav-item nav-link" id="nav-c{field:uid}-tab" data-toggle="tab" href="#nav-c{field:uid}" role="tab" aria-controls="nav-c{field:uid}">|</a>
                  1 = TEXT
                  1.value = <a class="nav-item nav-link active" id="nav-c{field:uid}-tab" data-toggle="tab" href="#nav-c{field:uid}" role="tab" aria-controls="nav-c{field:uid}">|</a>
                }
              }
            }
        }

        columns {
            101 < .default
            101 {
                wrap = <div class="tab-content">|</div>
                renderObj {
                    5 = LOAD_REGISTER
                    5 {
                        TabCount2.cObject = TEXT
                        TabCount2.cObject.data = register:TabCount2
                        TabCount2.cObject.wrap = |+1
                        TabCount2.prioriCalc = intval
                    }
                    stdWrap.insertData = 1
                    stdWrap.outerWrap.cObject = CASE
                    stdWrap.outerWrap.cObject {
                        key.data = register:TabCount2
                        default = TEXT
                        default.value = <div class="tab-pane fade" id="nav-c{field:uid}" role="tabpanel" aria-labelledby="nav-c{field:uid}-tab">|</div>
                        1 = TEXT
                        1.value = <div class="tab-pane fade show active" id="nav-c{field:uid}"role="tabpanel" aria-labelledby="nav-c{field:uid}-tab">|</div>
                    }
                    # don't show headers in tabs
                    #20 =< tt_content
                    20 < tt_content
                    20 {
                        text.10 >
                        image.10 >
                        textpic.10 >
                        uploads.10 >
                        table.10 >
                        multimedia.10 >
                        media.10 >
                        mailform.10 >
                        menu.10 >
                        videoce_videocontent.10 >
                    }
                }
            }
        }

        # Reset tab counts
        append = COA
        append {
            5 = LOAD_REGISTER
            5 {
                TabCount.cObject = TEXT
                TabCount.cObject.data = register:TabCount
                TabCount.cObject.wrap = |*0
                TabCount.prioriCalc = intval
            }
            10 = LOAD_REGISTER
            10 {
                TabCount2.cObject = TEXT
                TabCount2.cObject.data = register:TabCount2
                TabCount2.cObject.wrap = |*0
                TabCount2.prioriCalc = intval
            }
        }
    }

    4tabs < lib.gridelements.defaultGridSetup
    4tabs {
        # style wrap
        outerWrap = <div class="{field:flexform_style}">|</div>
        outerWrap.insertData = 1

        prepend = COA
        prepend.wrap = <ul class="nav nav-tabs" role="tablist">|</ul>
        prepend {
            10 = TEXT
            10.value = <li class="nav-item"><a class="nav-link active" id="nav-c{field:uid}-tab1" data-toggle="tab" href="#nav-c{field:uid}-c1" role="tab" aria-controls="nav-c{field:uid}-c1" aria-selected="true">{field:flexform_tabTitle1}</a></li>
            10.insertData = 1
            20 < .10
            20.value = <li class="nav-item"><a class="nav-link" id="nav-c{field:uid}-tab2" data-toggle="tab" href="#nav-c{field:uid}-c2" role="tab" aria-controls="nav-c{field:uid}-c2">{field:flexform_tabTitle2}</a></li>
            20.if.isTrue.field = flexform_tabTitle2
            30 < .10
            30.value = <li class="nav-item"><a class="nav-link" id="nav-c{field:uid}-tab3" data-toggle="tab" href="#nav-c{field:uid}-c3" role="tab" aria-controls="nav-c{field:uid}-c3">{field:flexform_tabTitle3}</a></li>
            30.if.isTrue.field = flexform_tabTitle3
            40 < .10
            40.value = <li class="nav-item"><a class="nav-link" id="nav-c{field:uid}-tab4" data-toggle="tab" href="#nav-c{field:uid}-c4" role="tab" aria-controls="nav-c{field:uid}-c4">{field:flexform_tabTitle4}</a></li>
            40.if.isTrue.field = flexform_tabTitle4
        }
        wrap = <div class="tab-content">|</div>
        columns {
            101 < .default
            101.wrap = <div class="tab-pane fade show active" id="nav-c{field:uid}-c1" role="tabpanel" aria-labelledby="nav-c{field:uid}-tab1">|</div>
            101.wrap.insertData = 1
            102 < .101
            102.wrap = <div class="tab-pane fade" id="nav-c{field:uid}-c2" role="tabpanel" aria-labelledby="nav-c{field:uid}-tab2">|</div>
            102.if.isTrue.field = flexform_tabTitle2
            103 < .101
            103.wrap = <div class="tab-pane fade" id="nav-c{field:uid}-c3" role="tabpanel" aria-labelledby="nav-c{field:uid}-tab3">|</div>
            103.if.isTrue.field = flexform_tabTitle3
            104 < .101
            104.wrap = <div class="tab-pane fade" id="nav-c{field:uid}-c4" role="tabpanel" aria-labelledby="nav-c{field:uid}-tab4">|</div>
            104.if.isTrue.field = flexform_tabTitle4
        }
    }

    6tabs < .4tabs
    6tabs {
        prepend {
            50 < .10
            50.value = <li class="nav-item"><a class="nav-link" id="nav-c{field:uid}-tab5" data-toggle="tab" href="#nav-c{field:uid}-c5" role="tab" aria-controls="nav-c{field:uid}-c5">{field:flexform_tabTitle5}</a></li>
            50.if.isTrue.field = flexform_tabTitle5

            60 < .10
            60.value = <li class="nav-item"><a class="nav-link" id="nav-c{field:uid}-tab6" data-toggle="tab" href="#nav-c{field:uid}-c6" role="tab" aria-controls="nav-c{field:uid}-c6">{field:flexform_tabTitle6}</a></li>
            60.if.isTrue.field = flexform_tabTitle6
        }
        columns {
            105 < .101
            105.wrap = <div class="tab-pane fade" id="nav-c{field:uid}-c5" role="tabpanel" aria-labelledby="nav-c{field:uid}-tab5">|</div>
            105.if.isTrue.field = flexform_tabTitle5

            106 < .101
            106.wrap = <div class="tab-pane fade" id="nav-c{field:uid}-c6" role="tabpanel" aria-labelledby="nav-c{field:uid}-tab6">|</div>
            106.if.isTrue.field = flexform_tabTitle6
        }
    }

    # Accordion
    accordion  < lib.gridelements.defaultGridSetup
    accordion {
        # wrap around all
        outerWrap.stdWrap.cObject = CASE
        outerWrap.stdWrap.cObject {
            key.field = flexform_rowclass
            default = TEXT
            default.value = <div id="accordion-{field:_LOCALIZED_UID//field:uid}">|</div>
        }
        outerWrap.insertData = 1

        columns {
            101 < .default
            101 {
                renderObj {
                    #stdWrap.outerWrap = <div class="panel panel-default">|</div>

                    5 = LOAD_REGISTER
                    5 {
                        AccordionCount.cObject = TEXT
                        AccordionCount.cObject.data = register:AccordionCount
                        AccordionCount.cObject.wrap = |+1
                        AccordionCount.prioriCalc = intval
                    }
                    10 = TEXT
                    10 {
                        field = header
                        insertData = 1
                        wrap          = <div class="card"><div class="card-header" id="heading-c{field:uid}"><h5 class="mb-0"><button class="btn btn-link collapsed" data-toggle="collapse" data-parent="#accordion-{field:tx_gridelements_container}" data-target="#collapse-{field:uid}" aria-expanded="false" aria-controls="collapse-{field:uid}">|</button></h5></div><div id="collapse-{field:uid}" class="collapse" aria-labelledby="heading-c{field:uid}" data-parent="#accordion-{field:tx_gridelements_container}"><div class="card-body">
                        wrap.override = <div class="card"><div class="card-header" id="heading-c{field:uid}"><h5 class="mb-0"><button class="btn btn-link" data-toggle="collapse" data-parent="#accordion-{field:tx_gridelements_container}" data-target="#collapse-{field:uid}" aria-expanded="false" aria-controls="collapse-{field:uid}">|</button></h5></div><div id="collapse-{field:uid}" class="collapse show" aria-labelledby="heading-c{field:uid}" data-parent="#accordion-{field:tx_gridelements_container}"><div class="card-body">
                        wrap.override.if.value = 1
                        wrap.override.if.equals.data = register:AccordionCount
                    }
                    # don't show headers in accordion
                    #20 =< tt_content
                    20 < tt_content
                    20 {
                        text.10 >
                        image.10 >
                        textpic.10 >
                        uploads.10 >
                        table.10 >
                        multimedia.10 >
                        media.10 >
                        mailform.10 >
                        menu.10 >
                        videoce_videocontent.10 >
                    }
                    30 = TEXT
                    30.wrap = |</div></div>
                }
            }
        }

        # Reset accordion count
        append = COA
        append {
            5 = LOAD_REGISTER
            5 {
                AccordionCount.cObject = TEXT
                AccordionCount.cObject.data = register:AccordionCount
                AccordionCount.cObject.wrap = |*0
                AccordionCount.prioriCalc = intval
            }
        }
    }

    # simple row for content elements and usage with ext:bscolwrap
    simpleRow < lib.gridelements.defaultGridSetup
    simpleRow {
        # row wrap
        wrap = <div class="row">|</div>
        columns {
            # special 111, used as check for conditional fields
            111 < .default
            111.wrap = |
        }
    }
}


# Assign grid rendering to layout ids (names)
#
tt_content.gridelements_pi1.20.10.setup {
    2cols < lib.bootstrap_grids.2cols
    3cols < lib.bootstrap_grids.3cols
    4cols < lib.bootstrap_grids.4cols
    accordion < lib.bootstrap_grids.accordion
    tabsSimple < lib.bootstrap_grids.simpleTabs
    tabs4 < lib.bootstrap_grids.4tabs
    tabs6 < lib.bootstrap_grids.6tabs
    xSimpleRow < lib.bootstrap_grids.simpleRow
}

